 // Handle form submission
  const handleSubmit = async (e) => {
    e.preventDefault();

    // Clear previous errors
    setErrors({});

    // Validate required fields
    let validationErrors = {};
    if (!name.trim()) validationErrors.name = "Product name is required.";
    if (!selectedCategory) validationErrors.category = "Category is required.";
    if (!(thumbnailImage instanceof File)) {
      validationErrors.thumbnailImage = "Thumbnail image is required.";
    }
    if (Object.keys(validationErrors).length > 0) {
      setErrors(validationErrors);
      return;
    }

    // Create FormData object
    const formData = new FormData();

    // Append text fields
    formData.append("name", name);
    formData.append("shortDesc", shortDesc);
    formData.append("longDesc", longDesc);
    formData.append("sizeChart", sizeChart);
    formData.append("shippingReturn", shippingReturn);
    formData.append("productCode", productCode);
    formData.append("rewardPoints", rewardPoints);
    formData.append("videoUrl", videoUrl);
    formData.append("metaTitle", metaTitle);
    formData.append("metaDescription", metaDescription);
    formData.append("finalPrice", finalPrice);
    formData.append("finalDiscount", finalDiscount);
    formData.append("finalStock", finalStock);
    formData.append("purchasePrice", purchasePrice);

    // Append category fields
    if (selectedCategory) formData.append("category", selectedCategory);
    if (selectedSubCategory) formData.append("subCategory", selectedSubCategory);
    if (selectedChildCategory) formData.append("childCategory", selectedChildCategory);

    // Append flags
    if (selectedFlags.length > 0) {
      selectedFlags.forEach((flag) => formData.append("flags", flag)); // Use "flags" instead of "flags[]"
    }

    // Append search tags and meta keywords
    if (searchTags.length > 0) {
      searchTags.forEach((tag) => formData.append("searchTags", tag)); // Use "searchTags" instead of "searchTags[]"
    }
    if (metaKeywords.length > 0) {
      metaKeywords.forEach((keyword) => formData.append("metaKeywords", keyword)); // Use "metaKeywords" instead of "metaKeywords[]"
    }

    // Append thumbnail image
    if (thumbnailImage instanceof File) {
      formData.append("thumbnailImage", thumbnailImage);
    }

    // Append multiple images
    selectedImages.forEach((image) => {
      if (image instanceof File) {
        formData.append("images", image); // Use "images" instead of "images[]"
      }
    });

    if (variants.length > 0) {
      variants.forEach((variant, index) => {
        // Check if all required fields are available for this variant
        if (!variant.size || !variant.stock || !variant.price) {
          // Skip this variant if any required field is missing
          console.error(`Variant ${index} is missing required fields (size, stock, or price).`);
          return;
        }

        // Only append valid variants with required fields
        Object.keys(variant).forEach((key) => {
          formData.append(`variants[${index}][${key}]`, variant[key]);
        });
      });
    }




    // Log FormData entries for debugging
    for (let pair of formData.entries()) {
      console.log(pair[0], pair[1]);
    }

    try {
      // Send request to the server
      const response = await axios.post(`http://localhost:5050/api/products`, formData, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      console.log("Product created successfully:", response.data);
      alert("Product created successfully!");
    } catch (error) {
      console.error("Error creating product:", error.response ? error.response.data : error.message);

      // Display server-side validation errors
      if (error.response && error.response.data) {
        setErrors(error.response.data);
      } else {
        alert("An unexpected error occurred. Please try again.");
      }
    }
  };